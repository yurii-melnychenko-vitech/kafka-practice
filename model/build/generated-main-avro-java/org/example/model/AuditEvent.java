/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuditEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8901160116830925836L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuditEvent\",\"namespace\":\"org.example.model\",\"fields\":[{\"name\":\"resourceType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"event\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"participant\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"java-class\":\"java.util.ArrayList\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"object\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"java-class\":\"java.util.ArrayList\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuditEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuditEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuditEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuditEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuditEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuditEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuditEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuditEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuditEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String resourceType;
  private java.lang.String event;
  private java.util.List<java.lang.String> participant;
  private java.lang.String source;
  private java.util.List<java.lang.String> object;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuditEvent() {}

  /**
   * All-args constructor.
   * @param resourceType The new value for resourceType
   * @param event The new value for event
   * @param participant The new value for participant
   * @param source The new value for source
   * @param object The new value for object
   */
  public AuditEvent(java.lang.String resourceType, java.lang.String event, java.util.List<java.lang.String> participant, java.lang.String source, java.util.List<java.lang.String> object) {
    this.resourceType = resourceType;
    this.event = event;
    this.participant = participant;
    this.source = source;
    this.object = object;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resourceType;
    case 1: return event;
    case 2: return participant;
    case 3: return source;
    case 4: return object;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resourceType = value$ != null ? value$.toString() : null; break;
    case 1: event = value$ != null ? value$.toString() : null; break;
    case 2: participant = (java.util.List<java.lang.String>)value$; break;
    case 3: source = value$ != null ? value$.toString() : null; break;
    case 4: object = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'resourceType' field.
   * @return The value of the 'resourceType' field.
   */
  public java.lang.String getResourceType() {
    return resourceType;
  }


  /**
   * Sets the value of the 'resourceType' field.
   * @param value the value to set.
   */
  public void setResourceType(java.lang.String value) {
    this.resourceType = value;
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public java.lang.String getEvent() {
    return event;
  }


  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(java.lang.String value) {
    this.event = value;
  }

  /**
   * Gets the value of the 'participant' field.
   * @return The value of the 'participant' field.
   */
  public java.util.List<java.lang.String> getParticipant() {
    return participant;
  }


  /**
   * Sets the value of the 'participant' field.
   * @param value the value to set.
   */
  public void setParticipant(java.util.List<java.lang.String> value) {
    this.participant = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'object' field.
   * @return The value of the 'object' field.
   */
  public java.util.List<java.lang.String> getObject() {
    return object;
  }


  /**
   * Sets the value of the 'object' field.
   * @param value the value to set.
   */
  public void setObject(java.util.List<java.lang.String> value) {
    this.object = value;
  }

  /**
   * Creates a new AuditEvent RecordBuilder.
   * @return A new AuditEvent RecordBuilder
   */
  public static org.example.model.AuditEvent.Builder newBuilder() {
    return new org.example.model.AuditEvent.Builder();
  }

  /**
   * Creates a new AuditEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuditEvent RecordBuilder
   */
  public static org.example.model.AuditEvent.Builder newBuilder(org.example.model.AuditEvent.Builder other) {
    if (other == null) {
      return new org.example.model.AuditEvent.Builder();
    } else {
      return new org.example.model.AuditEvent.Builder(other);
    }
  }

  /**
   * Creates a new AuditEvent RecordBuilder by copying an existing AuditEvent instance.
   * @param other The existing instance to copy.
   * @return A new AuditEvent RecordBuilder
   */
  public static org.example.model.AuditEvent.Builder newBuilder(org.example.model.AuditEvent other) {
    if (other == null) {
      return new org.example.model.AuditEvent.Builder();
    } else {
      return new org.example.model.AuditEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuditEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuditEvent>
    implements org.apache.avro.data.RecordBuilder<AuditEvent> {

    private java.lang.String resourceType;
    private java.lang.String event;
    private java.util.List<java.lang.String> participant;
    private java.lang.String source;
    private java.util.List<java.lang.String> object;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.model.AuditEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.participant)) {
        this.participant = data().deepCopy(fields()[2].schema(), other.participant);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.object)) {
        this.object = data().deepCopy(fields()[4].schema(), other.object);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AuditEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.model.AuditEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event)) {
        this.event = data().deepCopy(fields()[1].schema(), other.event);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.participant)) {
        this.participant = data().deepCopy(fields()[2].schema(), other.participant);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.object)) {
        this.object = data().deepCopy(fields()[4].schema(), other.object);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'resourceType' field.
      * @return The value.
      */
    public java.lang.String getResourceType() {
      return resourceType;
    }


    /**
      * Sets the value of the 'resourceType' field.
      * @param value The value of 'resourceType'.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder setResourceType(java.lang.String value) {
      validate(fields()[0], value);
      this.resourceType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceType' field has been set.
      * @return True if the 'resourceType' field has been set, false otherwise.
      */
    public boolean hasResourceType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resourceType' field.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder clearResourceType() {
      resourceType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public java.lang.String getEvent() {
      return event;
    }


    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder setEvent(java.lang.String value) {
      validate(fields()[1], value);
      this.event = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder clearEvent() {
      event = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'participant' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getParticipant() {
      return participant;
    }


    /**
      * Sets the value of the 'participant' field.
      * @param value The value of 'participant'.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder setParticipant(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.participant = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'participant' field has been set.
      * @return True if the 'participant' field has been set, false otherwise.
      */
    public boolean hasParticipant() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'participant' field.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder clearParticipant() {
      participant = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder setSource(java.lang.String value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'object' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getObject() {
      return object;
    }


    /**
      * Sets the value of the 'object' field.
      * @param value The value of 'object'.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder setObject(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.object = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'object' field has been set.
      * @return True if the 'object' field has been set, false otherwise.
      */
    public boolean hasObject() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'object' field.
      * @return This builder.
      */
    public org.example.model.AuditEvent.Builder clearObject() {
      object = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuditEvent build() {
      try {
        AuditEvent record = new AuditEvent();
        record.resourceType = fieldSetFlags()[0] ? this.resourceType : (java.lang.String) defaultValue(fields()[0]);
        record.event = fieldSetFlags()[1] ? this.event : (java.lang.String) defaultValue(fields()[1]);
        record.participant = fieldSetFlags()[2] ? this.participant : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (java.lang.String) defaultValue(fields()[3]);
        record.object = fieldSetFlags()[4] ? this.object : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuditEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuditEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuditEvent>
    READER$ = (org.apache.avro.io.DatumReader<AuditEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.resourceType);

    out.writeString(this.event);

    long size0 = this.participant.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.participant) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.source);

    long size1 = this.object.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.String e1: this.object) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.resourceType = in.readString();

      this.event = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.participant;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("participant").schema());
        this.participant = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      this.source = in.readString();

      long size1 = in.readArrayStart();
      java.util.List<java.lang.String> a1 = this.object;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("object").schema());
        this.object = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.resourceType = in.readString();
          break;

        case 1:
          this.event = in.readString();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.participant;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("participant").schema());
            this.participant = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.source = in.readString();
          break;

        case 4:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.String> a1 = this.object;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("object").schema());
            this.object = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










